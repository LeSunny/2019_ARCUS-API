package com.jam2in.restapi.Controller;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jam2in.restapi.ArcusRequest;
import com.jam2in.restapi.config.ArcusConfig;

import net.spy.memcached.ArcusClient;

/**
 * Handles requests for the application home page.
 */
@Controller
@PropertySource("classpath:/arcus.properties")
public class HomeController {
	
	/*private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	**
	 * Simply selects the home view to render by returning its name.
	 */
	/*@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		
		return "home";
	}*/
	
	@Autowired
	private ArcusConfig arcusConfig;


	@RequestMapping(value="/${arcus.apiVersion}/${arcus.serviceCode}/set", method=RequestMethod.POST)
	@ResponseBody
	void set(@RequestBody ArcusRequest arcusRequest){
		ArcusClient arcusClient;
		arcusClient= arcusConfig.defaultClient();
		
		Future<Boolean> future = null;
		boolean setSuccess = false;
		
		
		ObjectMapper mapper = new ObjectMapper();
		
		future = arcusClient.set(arcusRequest.getKey(), arcusRequest.getExpireTime(), arcusRequest.getObj());
		
		try {
			setSuccess = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(setSuccess);
		
		if(setSuccess) //중복 데이터 x
    	{
    		return "{\"result\":\"" + "true\"}";
    	}else //중복된 데이터가 있을 때 
    	{
    		return "{\"result\":\"" + "false\"}";
    	}	
	}
	
}
