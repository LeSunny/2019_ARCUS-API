package com.jam2in.restapi.Service;

import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jam2in.restapi.DAO.ApiDAO;

import net.spy.memcached.ArcusClient;
import net.spy.memcached.collection.CollectionAttributes;
import net.spy.memcached.internal.CollectionFuture;
import net.spy.memcached.ops.CollectionOperationStatus;

@Service("apiService")
public class ApiServiceImpl implements ApiService {

	@Resource(name="apiDAO")
	private ApiDAO apiDAO;
	
	public JsonNode set(String key, int expireTime, String value) {
		
		Future<Boolean> future = null;
		boolean result = false;	
		future = apiDAO.set(key, expireTime, value);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return returnJson;
		
	}
	public JsonNode add(String key, int expireTime, String value) {
		
		
				
	}
	public JsonNode replace(String key, int expireTime, String value) {
		
		
		
	}
	public JsonNode prepend(long cas, String key, Object value) {
		
		
		
	}
	public JsonNode append(long cas, String key, Object value) {

		
		
	}
	public JsonNode setBulk(List<String> key, int expireTime, Object value) {
		
		
		
	}
	public JsonNode setBulk(Map<String, Object> map, int expireTime) {
		
		
		
	}
	public JsonNode get(String key) {
		
		
		
	}
	public JsonNode getBulk(Collection<String> key) {
		
		
		
	}
	
	public JsonNode getAttr(String key) {
		
		
		
	}
	public JsonNode increase(String key, int by) {
		
		
		
	}
	public JsonNode increase(String key, int by, long def, int exp) {
		
		
		
	}
	public JsonNode decrease(String key, int by) {

		
		
	}
	public JsonNode decrease(String key, int by, long def, int exp) {
	
		
		
	}
	public JsonNode delete(String key) {
		
		

	}
}
