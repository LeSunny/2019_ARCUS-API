package com.jam2in.restapi.Service;

import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jam2in.restapi.DAO.ApiDAO;

import net.spy.memcached.ops.CollectionOperationStatus;

@Service("apiService")
public class ApiServiceImpl implements ApiService {

	@Resource(name="apiDAO")
	private ApiDAO apiDAO;
	
	JsonNode set(String key, int expireTime, String value) {
		Future<Boolean> future = null;
		boolean result = false;
		
		future = apiDAO.set(key, expireTime, value);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return returnJson;
	}
	JsonNode add(String key, int expireTime, String value) {
		Future<Boolean> future = null;
		boolean result = false;
		
		future = apiDAO.add(key, expireTime, value);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return returnJson;
	}
	JsonNode replace(String key, int expireTime, String value) {
		Future<Boolean> future = null;
		boolean result = false;
		
		future = apiDAO.replace(key, expireTime, value);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return returnJson;
	}
	JsonNode prepend(long cas, String key, Object value) {
		Future<Boolean> future = null;
		boolean result = false;
		
		future = apiDAO.prepend(cas,key,value);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return returnJson;
	}
	JsonNode append(long cas, String key, Object value) {
		Future<Boolean> future = null;
		boolean result = false;
		
		future = apiDAO.append(cas, key, value);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return returnJson;
	}
	JsonNode setBulk(List<String> key, int expireTime, Object value) {
		Future<Map<String,CollectionOperationStatus>> future = null;
		Map<String,CollectionOperationStatus> resultMap = null;
			
		if(arcusRequest.getValue().get(1) ==null) {
			future = arcusClient.asyncSetBulk(arcusRequest.getKey(),arcusRequest.getExpireTime(), arcusRequest.getValue().get(0));
		}else {
			Iterator<String> key = arcusRequest.getKey().iterator();
			Iterator<String> value = arcusRequest.getValue().iterator();
			HashMap<String,Object> paramMap = new HashMap<String,Object>();
			
			while(key.hasNext() && value.hasNext()) {
				paramMap.put(key.next(),value.next());
			}
			future = arcusClient.asyncSetBulk(paramMap, arcusRequest.getExpireTime());
		}

		try {
			resultMap = future.get(700L, TimeUnit.MILLISECONDS);
			System.out.println("result Map : "+resultMap);//.get("value")+"value");
		} catch (InterruptedException | ExecutionException | TimeoutException e) {
			e.printStackTrace();
		}
		
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = mapper.convertValue(resultMap, JsonNode.class);
		
		return returnJson;
	}
	JsonNode setBulk(Map<String, Object> map, int expireTime);
	JsonNode get(String key);
	JsonNode getBulk(Collection<String> key);
	JsonNode getAttr(String key);
	JsonNode increase(String key, int by);
	JsonNode increase(String key, int by, long def, int exp);
	JsonNode decrease(String key, int by);
	JsonNode decrease(String key, int by, long def, int exp);
	JsonNode delete(String key) {
		Future<Boolean> future = null;
		boolean result = false;
		
		future = apiDAO.delete(key);
		
		try {
			result = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(result);
		
		String jsonString;
		
		if(result) {
			jsonString = "{\"result\":\"" + "SUCCESS\"}";
		}else {
			jsonString = "{\"result\":\"" + "FAILED\"}";
		}
		
		ObjectMapper mapper = new ObjectMapper();
		JsonNode returnJson = null;
		try {
			returnJson = mapper.readTree(jsonString);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return returnJson;
	}
}
