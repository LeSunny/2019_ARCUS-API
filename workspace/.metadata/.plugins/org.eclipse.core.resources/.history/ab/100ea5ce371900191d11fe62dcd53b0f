package com.jam2in.restapi.DAO;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Future;

import org.springframework.beans.factory.annotation.Autowired;

import com.jam2in.restapi.Controller.boeolan;

import net.spy.memcached.ArcusClient;
import net.spy.memcached.collection.CollectionAttributes;
import net.spy.memcached.internal.CollectionFuture;
import net.spy.memcached.ops.CollectionOperationStatus;

public class ApiDAO {

	@Autowired
	private ArcusClient arcusClient;
	
	public Future<Boolean> set(String key, int expireTime, String value) {
		Future<Boolean> future = null;
			
		future = arcusClient.set(key, expireTime, value);
		
		return future;
	}
	public Future<Boolean> add(String key, int expireTime, String value){
		Future<Boolean> future = null;
		
		future = arcusClient.add(key, expireTime, value);
		
		return future;
	}
	public Future<Boolean> replace(String key, int expireTime, String value){
		Future<Boolean> future = null;
		
		future = arcusClient.replace(key, expireTime, value);
		
		return future;
	}
	public Future<Boolean> prepend(long cas, String key, Object value) {
		Future<Boolean> future = null;
		
		future = arcusClient.prepend(cas, key, value);
		
		return future;
	}
	public Future<Boolean> append(long cas, String key, Object value){
		Future<Boolean> future = null;
		
		future = arcusClient.append(cas, key, value);
		
		return future;
	}
	public Future<Map<String, CollectionOperationStatus>> setBulk(List<String> key, int expireTime, Object value){
		Future<Map<String,CollectionOperationStatus>> future = null;
		
		future = arcusClient.asyncSetBulk(key, expireTime, value);
		
		return future;
	}
	public Future<Map<String, CollectionOperationStatus>> setBulk(Map<String, Object> map, int expireTime){
		Future<Map<String,CollectionOperationStatus>> future = null;
		
		future = arcusClient.asyncSetBulk(map, expireTime);
		
		return future;
	}
	public Future<Object> get(String key){
		Future<Object> future = null;
		
		future = arcusClient.asyncGet(key);
		
		return future;
	}
	public Future<Map<String, Object>> getBulk(Collection<String> key);
	public CollectionFuture<CollectionAttributes> getAttr(String key);
	public Future<Long> increase(String key, int by);
	public Future<Long> increase(String key, int by, long def, int exp);
	public Future<Long> decrease(String key, int by);
	public Future<Long> decrease(String key, int by, long def, int exp);
	public Future<Boolean> delete(String key);
	
}
