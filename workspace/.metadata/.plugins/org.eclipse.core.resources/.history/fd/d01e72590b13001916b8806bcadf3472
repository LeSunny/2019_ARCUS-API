package com.jam2in.restapi.Controller;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jam2in.restapi.ArcusRequest;
import com.jam2in.restapi.config.ArcusConfig;

import net.spy.memcached.ArcusClient;

/**
 * Handles requests for the application home page.
 */
@Controller
@PropertySource("classpath:/arcus.properties")
public class HomeController {
		
	@Autowired
	private ArcusConfig arcusConfig;


	@RequestMapping(value="/${arcus.apiVersion}/${arcus.serviceCode}/set", method=RequestMethod.POST)
	@ResponseBody
	String set(@RequestBody ArcusRequest arcusRequest){
		/* localhost:8080/v1/test/set
		 body:
		 {
			"key" : "a",
			"expireTime" : 100,
			"obj" : "object"
		 }
		 */
		ArcusClient arcusClient;
		arcusClient= arcusConfig.defaultClient();
		
		Future<Boolean> future = null;
		boolean setSuccess = false;
		
		future = arcusClient.set(arcusRequest.getKey(), arcusRequest.getExpireTime(), arcusRequest.getObj());
		
		try {
			setSuccess = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(setSuccess);
		
		if(setSuccess)
    	{
    		return "{\"result\":\"" + "SUCCESS\"}";
    	}else 
    	{
    		return "{\"result\":\"" + "FAILED\"}";
    	}	
	}
	
	@RequestMapping(value="/${arcus.apiVersion}/${arcus.serviceCode}/add", method=RequestMethod.POST)
	@ResponseBody
	String add(@RequestBody ArcusRequest arcusRequest){
		/*
		  localhost:8080/v1/test/add
		 
		 body:
		 {
			"key" : "a",
			"expireTime" : 100,
			"obj" : "object"
		 }
		 */
		ArcusClient arcusClient;
		arcusClient= arcusConfig.defaultClient();
		
		Future<Boolean> future = null;
		boolean setSuccess = false;
		
		future = arcusClient.add(arcusRequest.getKey(), arcusRequest.getExpireTime(), arcusRequest.getObj());
		
		try {
			setSuccess = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(setSuccess);
		
		if(setSuccess)
    	{
    		return "{\"result\":\"" + "SUCCESS\"}";
    	}else 
    	{
    		return "{\"result\":\"" + "FAILED\"}";
    	}	
	}
	
	@RequestMapping(value="/${arcus.apiVersion}/${arcus.serviceCode}/replace", method=RequestMethod.PATCH)
	@ResponseBody
	String replace(@RequestBody ArcusRequest arcusRequest){
		/*
		  localhost:8080/v1/test/patch
		 
		 body:
		 {
			"key" : "a",
			"expireTime" : 100,
			"obj" : "object"
		 }
		 */
		ArcusClient arcusClient;
		arcusClient= arcusConfig.defaultClient();
		
		Future<Boolean> future = null;
		boolean setSuccess = false;
		
		future = arcusClient.replace(arcusRequest.getKey(), arcusRequest.getExpireTime(), arcusRequest.getObj());
		
		try {
			setSuccess = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(setSuccess);
		
		if(setSuccess)
    	{
    		return "{\"result\":\"" + "SUCCESS\"}";
    	}else 
    	{
    		return "{\"result\":\"" + "FAILED\"}";
    	}	
	}
	
	@RequestMapping(value="/${arcus.apiVersion}/${arcus.serviceCode}/async-get", method=RequestMethod.GET)
	@ResponseBody
	String get(@RequestBody ArcusRequest arcusRequest){
		/*
		 localhost:8080/v1/test/async-get
		 {
			"key" : "a"
		 }
		 */
		ArcusClient arcusClient;
		arcusClient = arcusConfig.defaultClient();
		
		Future<Object> future = null;
		Object value = null;
		
		future = arcusClient.asyncGet(arcusRequest.getKey(0));
		
		try {
			value = future.get(700L, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
		
		System.out.println(value);
		
		if(value!=null) {
			return "{\"value\":\""+(String)value+"\"}";
		}else {
			return "{\"value\":\"null\"}";
		}
	}
	//jackson : 
}
